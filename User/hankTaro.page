---
title: hankTaro (陳韋翰)
categories: User
...

# 簡介
* 國立成功大學 工程科學學系 112 級 (2019 ~ 2023)

* GitHub: [`hankTaro`](https://github.com/hankTaro)
* HackMD: [`hankTaro`](https://hackmd.io/@hankTaro)

## 成果發表


## Linux 核心和相關專案貢獻


## 其他專案貢獻


# 2023 Linux 核心設計/實作 春季班 自我評量
## 作業共筆
* lab0: [GitHub](https://github.com/hankTaro/lab0-c) / [HackMD](https://hackmd.io/@hankTaro/lab0-2023)
* fibdrv: [GitHub](https://github.com/hankTaro/fibdrv) / [HackMD](https://hackmd.io/nf1Z-twHTce4rk1XXguMwA)

## 測驗共筆
* quiz1: [HackMD](https://hackmd.io/@hankTaro/linux2023-quiz1)
* quiz2: [HackMD](https://hackmd.io/@hankTaro/quiz2)
* quiz3: [HackMD](https://hackmd.io/@hankTaro/linux2023-quiz3)
* quiz4: [HackMD](https://hackmd.io/@hankTaro/linux2023-quiz4)


## 期末專題
開發紀錄，標注與授課教師「一對一討論」的時間，並列出你針對授課教師的問答、啟發及相關成果

* Vcam: [HackMD](https://hackmd.io/@sysprog/rJEhcgoSn)

## 修課心得

這門課從第一周開始就給了非常多的教材以及工具要去理解熟悉，每周的進度都需要大量的時間閱讀，實驗與理解，而且內容並非只限於學術上，還有許多工具、網站的使用，原本是完全沒有使用 linux系統、 hackmd、 github 的經驗，也沒有閱讀官方文件的經驗，更別說對於 shell 的操作也一竅不通，所以在學期初花了許多時間在熟習使用這些工具。

另外教材的難度也是很有強度，我一篇文章就可以讓我看好幾天，還不一定看得懂，而且每個文章都會牽涉到許多相關知識，真的理解到讀得越多、冒出的問題也變得越多，作業就更不用說的，光是說明就可以看快一周了，但相反的在看完後會有一種「喔! 原來是這樣啊」的感嘆，但在實作時又會遇到各種狀況，常常處理完一個問題，一天就過去了，或是看著其他人的共筆交叉比對找問題時，羨慕他人的實力，最後好不容易做完一部份作業，收到回饋不論是有錯要修改或是提問其實都蠻開心的，會有一種真的有學到東西的感覺。

由於教學順序上也很實際，第一周學的 link_list 到第 18 周，幾乎每周都會出現，從第一周讀完後的似懂非懂，經過每周看到他的應用，變得要不懂也難，故在許多教材的吸收上，都是會隨著時間逐漸理解(前提是一開始有花時間好好閱讀與理解)

在〈[因為自動飲料機而延畢的那一年](http://opass.logdown.com/posts/1273243-the-story-of-auto-beverage-machine-1)〉中有一句話，「事情如果太順利代表絕對有問題，而問題永遠會從意想不到的地方冒出來。」，這句話在這們課中真的是深有感觸，往往一開始無腦做事，順順的到後面一定會出問題，到頭來還是要將前面的東西搞清楚，一路除錯到底。這些過程往往需要"處理問題的勇氣"，這聽起來很簡單，實際上卻難到靠杯，面對一個龐大的系統，裡頭有一堆完全不懂的東西，你要在這龐大的系統下做事，並在他出現問題時，嘗試排除他，這不像是數學或是文學，有已知的正確解答或是模玲兩可的空間，能運作就是能運作，不行就是不行，這也是我在課程中後期遇到的瓶頸，對於一個從來沒有見過的問題，並且網路上也沒有答案的問題，要如何去嘗試處理，這反倒是我課程後期在學習的點。

我蠻喜歡教授說的一句話:「就是因為難，才有工程師的價值，不然現在的國小生也會 google 拉，要工程師幹嘛」 以及「會自己誠實，不會就說不會，不要裝懂」
所以現在我還在

雖然這門課的教材量來說，我有吸收到的可能只有一兩成，但


## 自我評量 (1 ~ 10)

我會給自己8分，在課程前中期，真的是卯起來在學習，每天就是除了吃飯睡覺都在看教材和做作業，如果一直維持這樣的狀態到期末，我一定會給自己 10分滿分，但是在課程中後期，

